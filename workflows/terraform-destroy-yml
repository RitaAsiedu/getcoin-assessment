name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'DESTROY'
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.7.0'
    
    - name: Configure AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
        aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
        aws configure set default.region ${AWS_DEFAULT_REGION}

    - name: Delete ECR images
      run: |
        # Get the list of image IDs
        REPO_NAME="crypto-repo"
        echo "Checking images in repository: $REPO_NAME"
        
        # Check if repository exists
        if aws ecr describe-repositories --repository-names $REPO_NAME 2>/dev/null; then
          # Get image details and delete if exists
          IMAGES=$(aws ecr list-images --repository-name $REPO_NAME --query 'imageIds[*]' --output json)
          if [ "$IMAGES" != "[]" ] && [ ! -z "$IMAGES" ]; then
            echo "Deleting images from repository"
            aws ecr batch-delete-image \
              --repository-name $REPO_NAME \
              --image-ids "$(echo $IMAGES)" || true
          else
            echo "No images found in repository"
          fi
        else
          echo "Repository does not exist"
        fi
      continue-on-error: false

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=cryptos3bucket" \
          -backend-config="key=terraform.tfstate"

    - name: Terraform Plan Destroy
      run: |
        cd terraform
        terraform plan \
          -var="bucket_name=cryptos3bucket"

    - name: Terraform Destroy
      run: |
        cd terraform
        terraform destroy -auto-approve  \
          -var="bucket_name=cryptos3bucket"